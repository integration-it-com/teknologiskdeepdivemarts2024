# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
  - none

variables:
  - group: Common
  - name: directory
    value: "/MyFirstFunctionApp"
  - name: vmImageName
    value: "ubuntu-latest"
  - name: environment
    value: "test"

stages:
  - stage: Build
    variables:
      - name: workingDirectory
        value: "$(System.DefaultWorkingDirectory)$(directory)"
    displayName: Build stage

    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)

        steps:
          - script: echo $(workingDirectory)
          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              command: "build"
              projects: |
                $(workingDirectory)/*.csproj
              arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

          - task: ArchiveFiles@2
            displayName: "Archive files"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/publish_output"
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true

          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            artifact: drop

  - stage: Deploy
    variables:
      - group: Common
    displayName: Deploy Function app code
    dependsOn: Build
    condition: succeeded()

    jobs:
      - deployment: Deploy
        displayName: Deploy
        environment: $(environment)
        pool:
          vmImage: $(vmImageName)

        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureFunctionApp@1
                  displayName: "Azure functions app deploy"
                  inputs:
                    azureSubscription: $(sc.connection)
                    appType: functionApp
                    appName: "$(appName)-$(environment)-func"
                    package: "$(Pipeline.Workspace)/drop/$(Build.BuildId).zip"
